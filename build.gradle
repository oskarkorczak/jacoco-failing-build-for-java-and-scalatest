apply plugin: "idea"
apply plugin: "java"
apply plugin: 'scala'
apply plugin: 'jacoco'



repositories {
	jcenter()
	mavenCentral()
}

dependencies {
    runtime "org.scala-lang:scala-compiler:2.10.3+"
    compile "org.scala-lang:scala-library:2.10.3+"

    testCompile "junit:junit:4.11+"
    testCompile "org.scalatest:scalatest_2.10:2.0+"
}

jacocoTestReport {
	reports {
		xml.enabled true
	}

	doLast {
		def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
		logger.lifecycle("Checking coverage results: ${report}")

		// thresholds causing sample code to fail
		def limits = [
				'instruction': 93,
				'branch'     : 88,
				'line'       : 91,
				'complexity' : 84,
				'method'     : 87,
				'class'      : 95
		]

		// thresholds causing sample code to run successfully
//		def limits = [
//				'instruction': 23,
//				'branch'     : 23,
//				'line'       : 23,
//				'complexity' : 23,
//				'method'     : 23,
//				'class'      : 23
//		]

		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
		def results = parser.parse(report)

		def percentage = {
			def covered = it.'@covered' as Double
			def missed = it.'@missed' as Double
			((covered / (covered + missed)) * 100).round(2)
		}

		def counters = results.counter
		def metrics = [:]
		metrics << [
				'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
				'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
				'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
				'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
				'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
				'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
		]


		def failures = []
		metrics.each {
			def limit = limits[it.key]
			if (it.value < limit) {
				failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
			}
		}

		if (failures) {
			logger.quiet("------------------ Code Coverage Failed -----------------------")
			failures.each {
				logger.quiet(it)
			}
			logger.quiet("---------------------------------------------------------------")
			throw new GradleException("Code coverage failed")
		} else{
			logger.quiet("Passed Code Coverage Checks")
		}
	}
}
check.dependsOn jacocoTestReport